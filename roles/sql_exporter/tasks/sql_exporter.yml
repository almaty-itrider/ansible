---
- name: sql_exporter | Check if sql_exporter is installed
  register: sql_exporter_installed
  ansible.builtin.stat:
    path: "{{ sql_exporter_install_dir }}/sql_exporter"

- name: sql_exporter | Get installed sql_exporter version
  register: sql_exporter_version_output
  when: sql_exporter_installed.stat.exists
  changed_when: false
  ansible.builtin.command:
    cmd: "{{ sql_exporter_install_dir }}/sql_exporter --version"

- name: sql_exporter | Set installed sql_exporter version
  when: sql_exporter_installed.stat.exists and sql_exporter_version_output is defined
  ansible.builtin.set_fact:
    installed_sql_exporter_version: "{{ sql_exporter_version_output.stdout | regex_search('version ([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') | first }}"

- name: sql_exporter | Download and unarchive sql_exporter
  register: download_sql_exporter_result
  when: not sql_exporter_installed.stat.exists or sql_exporter_version != installed_sql_exporter_version
  notify:
    - Copy sql_exporter binary to {{ sql_exporter_install_dir }}
    - Remove sql_exporter binary from {{ sql_exporter_tmp_dir }}
  ansible.builtin.unarchive:
    src: "{{ sql_exporter_url }}"
    dest: "{{ sql_exporter_tmp_dir }}"
    remote_src: true

- name: sql_exporter | Copy files
  when: create_db_user_result.user is defined
  notify: Restart sql_exporter
  block:
    - name: sql_exporter | Create sql_exporter configs directory
      ansible.builtin.file:
        path: "{{ sql_exporter_config_dir }}"
        state: directory
        owner: "{{ sql_exporter_user }}"
        group: "{{ sql_exporter_user }}"
        mode: "0755"

    - name: sql_exporter | Copy sql_exporter metrics file to {{ sql_exporter_config_dir }}
      ansible.builtin.copy:
        src: pg_metrics.collector.yml
        dest: "{{ sql_exporter_config_dir }}/pg_metrics.collector.yml"
        owner: "{{ sql_exporter_user }}"
        group: "{{ sql_exporter_user }}"
        mode: "0640"

    - name: sql_exporter | Copy template files
      ansible.builtin.template:
        src: "{{ __sql_exporter_item.src }}"
        dest: "{{ __sql_exporter_item.dest }}"
        owner: "{{ sql_exporter_user }}"
        group: "{{ sql_exporter_user }}"
        mode: "0640"
      loop:
        - { src: "sql_exporter.yml.j2", dest: "{{ sql_exporter_config_dir }}/sql_exporter.yml" }
        - { src: "sql_exporter.service.j2", dest: "{{ sql_exporter_service_dir }}/sql_exporter.service" }
      loop_control:
        loop_var: __sql_exporter_item
